from utils.file_utils import load_csv
from pptx import Presentation
from io import BytesIO
# from data_preparation import load_csv
from datetime import date
from pptx.util import Inches, Pt
from pptx.chart.data import CategoryChartData
from pptx.enum.chart import XL_CHART_TYPE
import pandas as pd
import matplotlib.pyplot as plt
import io
import calendar

def table_summary_channel (df, selected_period):
    df['month'] = pd.to_datetime(df['month'])  # ubah ke datetime
    df = df.sort_values('month')  # pastikan urut
    df['month'] = df['month'].dt.strftime('%Y-%m')

    df['followers_growth'] = df['followers'].diff()
    df['total_post_growth'] = (df['total_post'].diff()/ df['total_post'].shift(1) * 100).round(0).fillna(0).astype(int)
    df['reach_growth'] = (df['reach'].diff()/ df['reach'].shift(1) * 100).round(0).fillna(0).astype(int)
    df['engagement_growth'] = (df['engagement'].diff() / df['engagement'].shift(1) * 100).round(0).fillna(0).astype(int)
    df['profile_visit_growth'] = (df['profile_visit'].diff() / df['profile_visit'].shift(1) * 100).round(0).fillna(0).astype(int)

    df['post_save_rate'] = df['saved_count'] / df['total_post']
    df['CTR'] = (df['profile_visit'] / df['profile_reach']) * 100
    # Ambil hanya untuk bulan terpilih
    df_filtered = df[df['month'] == selected_period]
    # Output final
    final_df = df_filtered[[
        "month",
        "followers", "followers_growth",
        "total_post", "total_post_growth",
        "reach", "reach_growth",
        "engagement", "engagement_growth",
        "profile_visit", "profile_visit_growth",
        "post_save_rate", "CTR"
    ]]
    return(final_df)
def table_followers_trend(df, selected_period):
    selected_year = selected_period[:4]  # Ambil "2025" dari "2025-03"

    # Filter dari bulan Januari sampai selected_period di tahun itu
    filtered = df[(df['month'] >= f"{selected_year}-01") & (df['month'] <= selected_period)]

    return filtered[['month', 'followers']].sort_values('month')

def table_engagement_trend(df, selected_period):
    selected_year = selected_period[:4]  # Ambil "2025" dari "2025-03"

    # Filter dari bulan Januari sampai selected_period di tahun itu
    filtered = df[(df['month'] >= f"{selected_year}-01") & (df['month'] <= selected_period)]

    return filtered[['month', 'engagement']].sort_values('month')

def table_top_post (df, selected_period):
    df['post_date'] = pd.to_datetime(df['post_date'])
    df['month'] = df['post_date'].dt.strftime('%Y-%m')
    df['engagement'] = df['like_count'] + df['comment_count'] + df['share_count'] + df['saved_count']
    filtered_df = df[df['month'] == selected_period]
    top_posts = filtered_df.sort_values(by='engagement', ascending=False)
    top_1_posts = top_posts.head(1)
    top_1_posts = top_1_posts[['media_url','engagement', 'media_type']]
    return top_1_posts
def generate_text_top_post(df):
    if df.empty:
        return "No top post found."

    row = df.iloc[0]
    return (
        f"Engagement: {row['engagement']}\n"
        f"Media type: {row['media_type']}\n"
        f"URL: {row['media_url']}"
    )
def table_bottom_post (df, selected_period):
    df['post_date'] = pd.to_datetime(df['post_date'])
    df['month'] = df['post_date'].dt.strftime('%Y-%m')
    df['engagement'] = df['like_count'] + df['comment_count'] + df['share_count'] + df['saved_count']
    filtered_df = df[df['month'] == selected_period]
    top_posts = filtered_df.sort_values(by='engagement', ascending=True)
    top_1_posts = top_posts.head(1)
    top_1_posts = top_1_posts[['media_url','engagement', 'media_type']]
    return(top_1_posts)
def table_popular_post(df, selected_period):
    df['post_date'] = pd.to_datetime(df['post_date'])
    df['month'] = df['post_date'].dt.strftime('%Y-%m')
    df['engagement'] = df['like_count'] + df['comment_count'] + df['share_count'] + df['saved_count']
    # Ekstrak tahun dari selected_period
    selected_year = selected_period[:4]
    # Filter dari awal tahun hingga selected_period
    filtered_df = df[(df['month'] >= f"{selected_year}-01") & (df['month'] <= selected_period)]
    top_posts = filtered_df.sort_values(by='engagement', ascending=False)
    top_1_posts = top_posts.head(1)
    top_1_posts = top_1_posts[['media_url','engagement', 'media_type']]
    return(top_1_posts)

def get_logo_path_by_username(username):
    logo_map = {
        "alva": "template/logo/vinfast.svg.png",
        # "bardi": "assets/logo_bardi.png",
        # "sanken": "assets/logo_sanken.png"
    }
    return logo_map.get(username.lower(), "template/logo/default_logo.png")

def add_logo_to_title_slide(prs, logo_path, left=Inches(8), top=Inches(0.2), width=Inches(1)):
    title_slide = prs.slides[0]
    title_slide.shapes.add_picture(logo_path, left, top, width=width)

def add_footer_to_slide(slide):
    footer_text = f"Generated by AI Automation - Python | {date.today()}"

    # Ukuran dan posisi
    left = Inches(0.3)
    top = Inches(5.2)  # dekat bawah, tweak sesuai tinggi slide kamu
    width = Inches(9)
    height = Inches(0.3)

    textbox = slide.shapes.add_textbox(left, top, width, height)
    text_frame = textbox.text_frame
    text_frame.clear()

    p = text_frame.paragraphs[0]
    run = p.add_run()
    run.text = footer_text
    run.font.size = Pt(8)
    run.font.italic = True


def insert_table_from_placeholder(slide, df, placeholder_text):
    # Temukan shape yang punya placeholder
    target_shape = next((s for s in slide.shapes if s.has_text_frame and placeholder_text in s.text), None)
    if not target_shape:
      #  st.warning(f"Placeholder '{placeholder_text}' tidak ditemukan.")
        return

    # Ambil ukuran dan posisi
    left, top, width, height = target_shape.left, target_shape.top, target_shape.width, target_shape.height

    # Hapus shape placeholder
    target_shape._element.getparent().remove(target_shape._element)

    # Buat tabel
    rows, cols = df.shape
    table = slide.shapes.add_table(rows + 1, cols, left, top, width, height).table

    # Header
    for col_idx, col_name in enumerate(df.columns):
        cell = table.cell(0, col_idx)
        cell.text = str(col_name)
        cell.text_frame.paragraphs[0].font.bold = True

    # Data
    for row_idx, row_data in enumerate(df.values):
        for col_idx, value in enumerate(row_data):
            table.cell(row_idx + 1, col_idx).text = str(value)

    # Set font size
    for row in table.rows:
        for cell in row.cells:
            cell.text_frame.paragraphs[0].font.size = Pt(10)
def insert_content_from_placeholder(slide, df, placeholder_text, placeholder_type="text"):
    """
    Fungsi ini akan mengganti placeholder dengan tipe yang sesuai (teks, tabel, atau chart).
    - placeholder_type: "text", "table", atau "chart".
    """
    # Cari shape yang sesuai dengan placeholder
    placeholder_shape = next((s for s in slide.shapes if hasattr(s, "text") and placeholder_text in s.text), None)

    if placeholder_shape:
        if placeholder_type == "text":
            # Ganti placeholder dengan teks
            placeholder_shape.text = placeholder_text.replace("{text}", "Ganti dengan teks sesuai data")

        elif placeholder_type == "table":
            # Menambahkan tabel berdasarkan DataFrame
            rows, cols = df.shape
            left = Inches(2)
            top = Inches(2)

            # Menambahkan tabel
            table = slide.shapes.add_table(rows + 1, cols, left, top, Inches(6), Inches(0.8 + 0.4 * rows)).table

            # Menambahkan header tabel
            for col_idx, col_name in enumerate(df.columns):
                table.cell(0, col_idx).text = col_name

            # Menambahkan data ke tabel
            for row_idx, row in df.iterrows():
                for col_idx, value in enumerate(row):
                    table.cell(row_idx + 1, col_idx).text = str(value)

        elif placeholder_type == "chart":
            # Menambahkan chart (grafik batang)
            chart_data = CategoryChartData()
            chart_data.categories = df.columns.tolist()  # Menjadikan kolom sebagai kategori chart
            chart_data.add_series("Data", df.iloc[0].tolist())  # Ambil data pertama sebagai contoh series

            # Menambahkan chart di slide
            x, y, cx, cy = Inches(1), Inches(2), Inches(6), Inches(3)
            chart = slide.shapes.add_chart(
                XL_CHART_TYPE.COLUMN_CLUSTERED, x, y, cx, cy, chart_data
            ).chart
def format_selected_period_id(period_id):
    # Contoh: "2025-01" â†’ "Januari 2025"
    import calendar
    year, month = map(int, period_id.split('-'))
    bulan = calendar.month_name[month]
    return f"{bulan} {year}"
def insert_chart_from_placeholder(slide, img_stream, placeholder_text):
    """
    Gantikan placeholder_text dengan gambar chart dari BytesIO.
    """
    # Cari shape placeholder
    ph = next((s for s in slide.shapes
               if s.has_text_frame and placeholder_text in s.text), None)
    if not ph:
        return

    # Ambil posisi & ukuran
    left, top, width, height = ph.left, ph.top, ph.width, ph.height

    # Hapus placeholder
    ph._element.getparent().remove(ph._element)

    # Sisipkan gambar langsung dari stream
    slide.shapes.add_picture(img_stream, left, top, width=width, height=height)

def replace_text_placeholders(slide, content_dict):
    for shape in slide.shapes:
        if shape.has_text_frame:
            for placeholder, content in content_dict.items():
                if content["type"] == "text" and f"{{{placeholder}}}" in shape.text:
                    shape.text = shape.text.replace(f"{{{placeholder}}}", str(content["value"]))
def create_ppt_from_template(content_dict, template_path, username, selected_period):
    prs = Presentation(template_path)

    # Tambahkan logo di title slide
    logo_path = get_logo_path_by_username(username)
    add_logo_to_title_slide(prs, logo_path)

    # Slide 1: ubah brand dan periode
    slide_1 = prs.slides[0]
    for shape in slide_1.shapes:
        if hasattr(shape, "text"):
            shape.text = shape.text.replace("{brand}", username)
            shape.text = shape.text.replace("{periode}", format_selected_period_id(selected_period))

    # Proses semua slide
    for slide in prs.slides:
        add_footer_to_slide(slide)
        replace_text_placeholders(slide, content_dict)

        # Loop semua placeholder dari content_dict
        for placeholder, content in content_dict.items():
            if content["type"] == "table":
                if not content["value"].empty:
                    insert_table_from_placeholder(slide, content["value"], placeholder)
            elif content["type"] == "chart":
                # content["value"] sekarang adalah BytesIO
                insert_chart_from_placeholder(slide, content["value"], placeholder)
            elif content["type"] == "text":
                replace_text_placeholders(slide, {placeholder: content})  # Panggil fungsi untuk mengganti teks

    # Simpan ke memory
    ppt_bytes = BytesIO()
    prs.save(ppt_bytes)
    ppt_bytes.seek(0)
    return ppt_bytes
def generate_ppt(username, selected_period):
    # fact_post_ig = load_csv("data/fact_instagram_post_dummy.csv")
    fact_post_tt = load_csv("fact_tiktok_post.csv")
    fact_post_ig = load_csv("fact_instagram_post.csv")
    datamart_ig = load_csv("datamart_ig.csv")  #adjust disini
    datamart_tt = load_csv("datamart_tt.csv") #adjust disini
    datamart_all = pd.concat([datamart_ig, datamart_tt], ignore_index=True) #adjust disini
    datamart_all = datamart_all.groupby('month', as_index=False).sum()
    #ig
    table_summary_ig = table_summary_channel(datamart_ig, selected_period)
    table_followers_trend_ig = table_followers_trend(datamart_ig, selected_period)
    table_engagement_trend_ig = table_engagement_trend(datamart_ig, selected_period)
    table_top_post_ig =table_top_post(fact_post_ig,selected_period)
    table_bottom_post_ig =table_bottom_post(fact_post_ig,selected_period)
    table_popular_post_ig = table_popular_post(fact_post_ig, selected_period)
    #tiktok
    table_summary_tt = table_summary_channel(datamart_tt,selected_period)
    table_followers_trend_tt = table_followers_trend(datamart_tt, selected_period)
    table_engagement_trend_tt = table_engagement_trend(datamart_tt, selected_period)
    table_top_post_tt =table_top_post(fact_post_tt,selected_period)
    table_bottom_post_tt =table_bottom_post(fact_post_tt,selected_period)
    table_popular_post_tt = table_popular_post(fact_post_tt, selected_period)
    #all
    table_summary_all = table_summary_channel(datamart_all,selected_period)

    content_dict = {
        "text_top_post_instagram": {
            "type": "text",
            "value": generate_text_top_post(table_top_post_ig)
        },

        "text_bottom_post_instagram": {
            "type": "text",
            "value": generate_text_top_post(table_bottom_post_ig)
        },

        "text_popular_post_instagram": {
            "type": "text",
            "value": generate_text_top_post(table_popular_post_ig)
        },
        "text_top_post_tiktok": {
            "type": "text",
            "value": generate_text_top_post(table_top_post_tt)
        },

        "text_bottom_post_tiktok": {
            "type": "text",
            "value": generate_text_top_post(table_bottom_post_tt)
        },

        "text_popular_post_tiktok": {
            "type": "text",
            "value": generate_text_top_post(table_popular_post_tt)
        },
        "chart_engagement_trend_instagram": {
            "type": "chart",
            "value": plot_trend_engagement_io(table_engagement_trend_ig)
        },
        "chart_followers_trend_instagram": {
            "type": "chart",
            "value": plot_trend_followers_io(table_followers_trend_ig)
        },
        "chart_engagement_trend_tiktok": {
            "type": "chart",
            "value": plot_trend_engagement_io(table_engagement_trend_tt)
        },
        "chart_followers_trend_tiktok": {
            "type": "chart",
            "value": plot_trend_followers_io(table_followers_trend_tt)
        },
        "total_followers_all": {
            "type": "text",
            "value": table_summary_all['followers'].iloc[0]
        },
        "growth_followers_all": {
            "type": "text",
            "value": table_summary_all['followers_growth'].iloc[0]
        },
        "total_post_all": {
            "type": "text",
            "value": table_summary_all['total_post'].iloc[0]
        },
        "growth_post_all": {
            "type": "text",
            "value": table_summary_all['total_post_growth'].iloc[0]
        },
        "total_reach_all": {
            "type": "text",
            "value": table_summary_all['reach'].iloc[0]
        },
        "growth_reach_all": {
            "type": "text",
            "value": table_summary_all['reach_growth'].iloc[0]
        },
        "table_summary_tiktok": {
            "type": "table",
            "value": table_summary_tt
        },
        "table_summary_instagram": {
            "type": "table",
            "value": table_summary_ig
        }
    }

    ppt_bytes = create_ppt_from_template(content_dict, "template/template_ppt/POCALVA-template.pptx", username, selected_period)
    return ppt_bytes


def plot_trend_engagement_io(df):
    # Pastikan df['month'] sudah datetime
    df = df.copy()
    df['month'] = pd.to_datetime(df['month'])

    fig, ax = plt.subplots(figsize=(6, 4))
    ax.plot(df['month'], df['engagement'], marker='o', linewidth=2)
    ax.set_xticks(df['month'])
    ax.set_xticklabels(df['month'].dt.strftime('%b %Y'), rotation=45)
    ax.set_title("Trend Engagement by Month")
    ax.set_xlabel("Month")
    ax.set_ylabel("Total Engagement")
    ax.grid(True)
    plt.tight_layout()

    # Dump ke BytesIO
    img_stream = io.BytesIO()
    fig.savefig(img_stream, format="png", bbox_inches="tight")
    plt.close(fig)
    img_stream.seek(0)
    return img_stream

def plot_trend_followers_io(df):
    # Pastikan df['month'] sudah datetime
    df = df.copy()
    df['month'] = pd.to_datetime(df['month'])

    fig, ax = plt.subplots(figsize=(6, 4))
    ax.plot(df['month'], df['followers'], marker='o', linewidth=2)
    ax.set_xticks(df['month'])
    ax.set_xticklabels(df['month'].dt.strftime('%b %Y'), rotation=45)
    ax.set_title("Trend Followers by Month")
    ax.set_xlabel("Month")
    ax.set_ylabel("Total Followers")
    ax.grid(True)
    plt.tight_layout()

    # Dump ke BytesIO
    img_stream = io.BytesIO()
    fig.savefig(img_stream, format="png", bbox_inches="tight")
    plt.close(fig)
    img_stream.seek(0)
    return img_stream

def create_ppt_from_template_basic(content_dict, template_path, username, start_date, end_date):
    month_name = calendar.month_name[start_date.month]
    periode_month_years = f"{month_name} {start_date.year}"
    periode = f"{start_date.day}-{end_date.day} {month_name} {start_date.year}"

    prs = Presentation(template_path)

    # Tambahkan logo di title slide
    logo_path = get_logo_path_by_username(username)
    add_logo_to_title_slide(prs, logo_path)

    # Slide 1: ubah brand dan periode
    slide = prs.slides[0]
    for shape in slide.shapes:
        if hasattr(shape, "text"):
            shape.text = shape.text.replace("{periode}", periode_month_years)
            shape.text = shape.text.replace("{filter_data}", periode)
    for slide in [prs.slides[1], prs.slides[4]]:
        for shape in slide.shapes:
            if shape.has_text_frame:
                for para in shape.text_frame.paragraphs:
                    for run in para.runs:
                        for key, value in content_dict.items():
                            if key in run.text:
                                run.text = run.text.replace(key, str(value))

    # Loop tabel dalam slide
    for slide_table in [prs.slides[6], prs.slides[7]]:
        for shape in slide_table.shapes:
            if shape.has_table:
                table = shape.table

                for row in table.rows:
                    for cell in row.cells:
                        for paragraph in cell.text_frame.paragraphs:
                            for run in paragraph.runs:
                                for key, value in content_dict.items():
                                    if key in run.text:
                                        run.text = run.text.replace(key, str(value))

    # Simpan ke memory
    ppt_bytes = BytesIO()
    prs.save(ppt_bytes)
    ppt_bytes.seek(0)
    return ppt_bytes

import pandas as pd

def calculate_growth(current_value, previous_value):
    if previous_value == 0:
        return None
    return ((current_value - previous_value) / previous_value) * 100

import pandas as pd

def calculate_growth(current_value, previous_value):
    if previous_value == 0:
        return None
    return ((current_value - previous_value) / previous_value) * 100

def calculate_metrics(df, selected_year, selected_month):
    # Pastikan post_date adalah datetime
    df["post_date"] = pd.to_datetime(df["post_date"], errors="coerce")
    df["year"] = df["post_date"].dt.year
    df["month"] = df["post_date"].dt.month

    # Filter current month
    current_df = df[(df["year"] == selected_year) & (df["month"] == selected_month)]

    # Cari bulan sebelumnya
    if selected_month == 1:
        prev_month = 12
        prev_year = selected_year - 1
    else:
        prev_month = selected_month - 1
        prev_year = selected_year

    previous_df = df[(df["year"] == prev_year) & (df["month"] == prev_month)]

    # Helper function hitung metrics
    def compute_metrics(sub_df):
        return {
            "post_count": sub_df["post_id"].count(),
            "engagement": (sub_df["like_count"] + sub_df["comment_count"] + sub_df["share_count"] + sub_df["saved_count"]).sum(),
            "impressions": sub_df["impression_count"].sum(),
            "reach": sub_df["unique_viewers"].sum(),
            "views": sub_df["view_count"].sum(),
            "clicks": sub_df["link_clicks"].sum(),
        }

    # Total semua channel
    current_total = compute_metrics(current_df)
    previous_total = compute_metrics(previous_df)

    # Filter Instagram dan TikTok
    current_ig = compute_metrics(current_df[current_df["channel"].str.lower() == "instagram"])
    previous_ig = compute_metrics(previous_df[previous_df["channel"].str.lower() == "instagram"])

    current_tt = compute_metrics(current_df[current_df["channel"].str.lower() == "tiktok"])
    previous_tt = compute_metrics(previous_df[previous_df["channel"].str.lower() == "tiktok"])

    # Hitung growth total
    growth_total = {
        "growth_post": calculate_growth(current_total["post_count"], previous_total["post_count"]),
        "growth_engagement": calculate_growth(current_total["engagement"], previous_total["engagement"]),
        "growth_impressions": calculate_growth(current_total["impressions"], previous_total["impressions"]),
        "growth_reach": calculate_growth(current_total["reach"], previous_total["reach"]),
        "growth_views": calculate_growth(current_total["views"], previous_total["views"]),
        "growth_clicks": calculate_growth(current_total["clicks"], previous_total["clicks"]),
    }

    # Growth Instagram
    growth_ig = {
        "growth_post": calculate_growth(current_ig["post_count"], previous_ig["post_count"]),
        "growth_engagement": calculate_growth(current_ig["engagement"], previous_ig["engagement"]),
        "growth_impressions": calculate_growth(current_ig["impressions"], previous_ig["impressions"]),
        "growth_reach": calculate_growth(current_ig["reach"], previous_ig["reach"]),
        "growth_views": calculate_growth(current_ig["views"], previous_ig["views"]),
        "growth_clicks": calculate_growth(current_ig["clicks"], previous_ig["clicks"]),
    }

    # Growth TikTok
    growth_tt = {
        "growth_post": calculate_growth(current_tt["post_count"], previous_tt["post_count"]),
        "growth_engagement": calculate_growth(current_tt["engagement"], previous_tt["engagement"]),
        "growth_impressions": calculate_growth(current_tt["impressions"], previous_tt["impressions"]),
        "growth_reach": calculate_growth(current_tt["reach"], previous_tt["reach"]),
        "growth_views": calculate_growth(current_tt["views"], previous_tt["views"]),
        "growth_clicks": calculate_growth(current_tt["clicks"], previous_tt["clicks"]),
    }

    # Gabungkan semua
    result = {
        "total": {
            "current": current_total,
            "previous": previous_total,
            "growth": growth_total,
        },
        "instagram": {
            "current": current_ig,
            "previous": previous_ig,
            "growth": growth_ig,
        },
        "tiktok": {
            "current": current_tt,
            "previous": previous_tt,
            "growth": growth_tt,
        }
    }

    return result


def generate_ppt_basic(username, start_date,end_date):
    #periode data
    month_name = calendar.month_name[start_date.month]
    periode_month_years = f"{month_name} {start_date.year}"
    periode = f"{start_date.day}-{end_date.day} {month_name} {start_date.year}"

    #data
    df = load_csv("vinfast_dummy.csv")
    metrics_result = calculate_metrics(df, 2025, 3)


    link_ig = 'https://www.instagram.com/vinfast.indonesia'
    link_tt = 'https://www.tiktok.com/@vinfastindonesia'
    impression_meta_kpi = 1
    cpm_meta_kpi=23
    impression_tt_kpi =98
    cpm_tt_kpi =6543

    growth_values = {
        "post": metrics_result["total"]["growth"]["growth_post"],
        "engagement": metrics_result["total"]["growth"]["growth_engagement"],
        "clicks": metrics_result["instagram"]["growth"]["growth_clicks"],
        "impressions": metrics_result["instagram"]["growth"]["growth_impressions"],
        "reach": metrics_result["instagram"]["growth"]["growth_reach"],
        "views": metrics_result["tiktok"]["growth"]["growth_views"],
    }

    def get_direction(value):
        if value > 0:
            return "Increased"
        elif value < 0:
            return "Decreased"
        else:
            return "No change"

    directions = {k: get_direction(v) for k, v in growth_values.items()}

    data = {
        #slide 2
        "{filter_data}": periode,
        "{post}": metrics_result["total"]["current"]["post_count"],
        "{engagement}": metrics_result["total"]["current"]["engagement"],
        "{click_ig}": metrics_result["instagram"]["current"]["clicks"],
        "{impressions_ig}": metrics_result["instagram"]["current"]["impressions"],
        "{reach_ig}": metrics_result["instagram"]["current"]["reach"],
        "{views_tt}": metrics_result["tiktok"]["current"]["views"],

        "{growth_post}":f'{abs(metrics_result["total"]["growth"]["growth_post"]):.2f}'.replace(".", ",") + "%",
        "{growth_engagement}": f'{abs(metrics_result["total"]["growth"]["growth_engagement"]):.2f}'.replace(".", ",") + "%",
        "{growth_click}": f'{abs(metrics_result["instagram"]["growth"]["growth_clicks"]):.2f}'.replace(".", ",") + "%",
        "{growth_impressions}":f'{abs(metrics_result["instagram"]["growth"]["growth_impressions"]):.2f}'.replace(".", ",") + "%",
        "{growth_reaches}": f'{abs(metrics_result["instagram"]["growth"]["growth_reach"]):.2f}'.replace(".", ",") + "%",
        "{growth_views}": f'{abs(metrics_result["tiktok"]["growth"]["growth_views"]):.2f}'.replace(".", ",") + "%",

        "{indikator_post}": directions["post"],
        "{indikator_engagement}": directions["engagement"],
        "{indikator_clicks}": directions["clicks"],
        "{indikator_impressions}": directions["impressions"],
        "{indikator_reaches}": directions["reach"],
        "{indikator_views}": directions["views"],

        #slide 5
        "{post_ig}": metrics_result["instagram"]["current"]["post_count"],
        "{stories_ig}": metrics_result["instagram"]["current"]["post_count"], #ganti nilai stories #cek formula
        "{post_tt}": metrics_result["tiktok"]["current"]["post_count"],
        # "{followers_growth_ig}": str("post_count"),
        "{views_ig}": metrics_result["instagram"]["current"]["views"],
        "{engagement_ig}": metrics_result["instagram"]["current"]["engagement"],
        "{er_ig}": metrics_result["instagram"]["current"]["post_count"],   #cek formula
        "{er_growth_ig}": metrics_result["instagram"]["current"]["post_count"],  #cek formula
        # "{followers_growth_tt}": str(followers_growth_tt),
        "{reach_tt}": metrics_result["tiktok"]["current"]["reach"],
        #"{plays_tt}": metrics_result["tiktok"]["current"]["plays"], #cek formula
        "{engagement_tt}": metrics_result["tiktok"]["current"]["engagement"],
        "{er_tt}": metrics_result["tiktok"]["current"]["engagement"], #cek formula
        "{er_growth_tt}": metrics_result["tiktok"]["current"]["engagement"], #cek formula
        "{link_ig}": link_ig,
        "{link_tt}": link_tt,
        #slide 8
        "{impression_meta_kpi}" : str(impression_meta_kpi),
        "{cpm_meta_kpi}" : str(cpm_meta_kpi) ,
        "{impression_tt_kpi}" : "43" ,
        "{cpm_tt_kpi}" : "543" ,
        "{impression_meta}" : "543" ,
        "{cpm_meta}" : "654",
        "{click_meta}" : "6543",
        "{ctr_meta}" : "54",
        " {impression_tt}" : "654",
        "{cpm_tt}" : "654",
        "{click_tt}" : "43",
        "{ctr_tt}" : "4"
    }
    ppt_bytes = create_ppt_from_template_basic(data, "template/template_ppt/vinfast.pptx", username, start_date, end_date)
    return ppt_bytes

df = load_csv("vinfast_dummy.csv")
metrics_result = calculate_metrics(df, 2025, 3)
print(metrics_result)